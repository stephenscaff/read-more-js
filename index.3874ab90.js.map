{"mappings":"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","sources":["src/utils/index.js","src/read-smore.js","demo/src/app.js"],"sourcesContent":["'use strict'\n\n/**\n * Get Character Count\n * @param {string\n * @param {number}\n */\nexport function getCharCount(str) {\n  return str.length\n}\n\n/**\n * Get Word Count\n * @param {string}\n * @param {number}\n */\nexport function getWordCount(str) {\n  const words = removeTags(str).split(' ')\n  return words.filter((word) => word.trim() !== '').length\n}\n\n/**\n * Trim whitespace\n * @param {string}\n * @param {string}\n */\nexport function trimSpaces(str) {\n  return str.replace(/(^\\s*)|(\\s*$)/gi, '')\n}\n\n/**\n * Remove HTML Tags from string\n * @param {string}\n * @param {string}\n */\nexport function removeTags(str) {\n  if (str === null || str === '') {\n    return false\n  }\n\n  return str.replace(/<[^>]+>/g, '')\n}\n","import { getWordCount, getCharCount, trimSpaces } from './utils'\n;('use strict')\n\n/**\n * Defaults\n */\nconst defaultOptions = {\n  blockClassName: 'read-smore',\n  wordsCount: 30,\n  charsCount: null,\n  moreText: 'Read More',\n  lessText: 'Read Less',\n  isInline: false,\n  linkElement: 'a'\n}\n\n/**\n * ReadSmore\n * @author @stephenscaff\n * @param {HTML element} element\n * @param {Object} options\n * @returns\n */\nfunction ReadSmore(element, options) {\n  options = Object.assign({}, defaultOptions, options)\n\n  // Internal Settings\n  let settings = {\n    originalContentArr: [],\n    truncatedContentArr: []\n  }\n\n  /**\n   * Init plugin\n   * Loop over instances and begin truncation procress\n   * @public\n   */\n  function init() {\n    for (let i = 0, n = element.length; i < n; ++i) {\n      truncate(element[i], i)\n    }\n  }\n\n  /**\n   * Is Characters\n   * Utility to check if is chars mode\n   *\n   * @private\n   * @param {HTML Elmenent} el - single element instance\n   */\n  function isChars(el) {\n    if (\n      el.dataset.readSmoreChars !== undefined ||\n      options.charsCount !== null\n    ) {\n      return true\n    }\n\n    return false\n  }\n\n  /**\n   * Is inline option\n   * @private\n   * @param {HTML element} el - element instance\n   * @returns {Bool}\n   */\n  function isInline(el) {\n    if (el.dataset.readSmoreInline !== undefined || options.isInline === true) {\n      return true\n    }\n\n    return false\n  }\n\n  /**\n   * Get Count of characters or words.\n   * Favors Characters from data att, then option, then words.\n   * @private\n   * @param {HTML Elmenent} el - single element instance\n   * @returns {Number}\n   */\n  function getCount(el) {\n    if (el.dataset.readSmoreChars !== undefined) {\n      return parseInt(el.dataset.readSmoreChars)\n    }\n\n    if (options.charsCount !== null) {\n      return parseInt(options.charsCount)\n    }\n\n    if (el.dataset.readSmoreWords !== undefined) {\n      return parseInt(el.dataset.readSmoreWords)\n    }\n\n    if (options.wordsCount !== null) {\n      return parseInt(options.wordsCount)\n    }\n  }\n\n  /**\n   * Ellpise Content\n   * Handles content ellipse by words or charactes\n   * @private\n   * @param {String} str - content string.\n   * @param {Number} max - Number of words||chars2 to show before truncation.\n   * @param {Bool} isChars - is by chars\n   */\n  function ellipse(str, max, isChars = false) {\n    // Trim starting/ending empty spaces\n    const trimedSpaces = trimSpaces(str)\n\n    if (isChars) {\n      return (\n        trimedSpaces\n          .split('')\n          .slice(0, max - 1)\n          .join('') + '...'\n      )\n    }\n\n    return (\n      trimedSpaces\n        .split(/\\s+/)\n        .slice(0, max - 1)\n        .join(' ') + '...'\n    )\n  }\n\n  /**\n   * Truncate logic\n   * Gets user defined count for words/chars (set by data att, option or default),\n   * gets content's count by words/chars, if defined is less than content, truncate\n   * @private\n   * @param {HTML Elmenent} el - single element instance\n   * @param {Number} i - current instance index\n   */\n  function truncate(el, idx) {\n    const definedCount = getCount(el)\n    const originalContent = el.innerHTML\n    const truncateContent = ellipse(originalContent, definedCount, isChars(el))\n    const originalContentCount = isChars(el)\n      ? getCharCount(originalContent)\n      : getWordCount(originalContent)\n\n    settings.originalContentArr.push(originalContent)\n    settings.truncatedContentArr.push(truncateContent)\n\n    // bail if total count is less that original content count\n    if (definedCount < originalContentCount) {\n      el.innerHTML = settings.truncatedContentArr[idx]\n      let self = idx\n      createLink(self)\n    }\n  }\n\n  /**\n   * Creates and Inserts Read More Link\n   * @private\n   * @param {Number} idx - index reference of looped item\n   */\n  function createLink(idx) {\n    const isInlineLink = isInline(element[idx])\n    const linkWrap = document.createElement('span')\n    linkWrap.className = `${options.blockClassName}__link-wrap`\n    linkWrap.innerHTML = linkTmpl(idx)\n\n    if (isInlineLink) {\n      handleInlineStyles(element[idx], linkWrap)\n    }\n    element[idx].after(linkWrap)\n    setupToggleEvents(idx, isInlineLink)\n  }\n\n  /**\n   * Read More Link Template\n   * @param {Number} idx\n   * @returns {String} - html string\n   */\n  function linkTmpl(idx) {\n    return `\n      <${options.linkElement} id=\"${options.blockClassName}_${idx}\"\n        class=\"${options.blockClassName}__link\"\n        style=\"cursor:pointer\"\n        aria-expanded=\"false\"a\n        tabIndex=\"0\">\n          ${options.moreText}\n      </${options.linkElement}>\n    `\n  }\n\n  /**\n   * Sets up and calls click and keyup (enter key) events\n   * @private\n   * @param {Number} idx - index of clicked link\n   * @param {Bool} isInlineLink - if link element is inline with content\n   */\n  function setupToggleEvents(idx, isInlineLink) {\n    const link = document.querySelector(`#${options.blockClassName}_${idx}`)\n    link.addEventListener('click', (event) =>\n      handleToggle(event, idx, isInlineLink)\n    )\n    link.addEventListener('keyup', (event) => {\n      if (event.keyCode === 13) handleToggle(event, idx, isInlineLink)\n    })\n  }\n\n  /**\n   * Toggle event\n   * @private\n   * @param {Event} e - click | keyup event\n   * @param {Number} idx - index of clicked link\n   * @param {Bool} isInlineLink - if link element is inline with content\n   */\n  function handleToggle(e, idx, isInlineLink) {\n    element[idx].classList.toggle('is-expanded')\n    const target = e.currentTarget\n    if (target.dataset.clicked !== 'true') {\n      element[idx].innerHTML = settings.originalContentArr[idx]\n      target.innerHTML = options.lessText\n      target.dataset.clicked = true\n      target.ariaExpanded = true\n      if (isInlineLink) handleInlineStyles(element[idx])\n    } else {\n      element[idx].innerHTML = settings.truncatedContentArr[idx]\n      target.innerHTML = options.moreText\n      target.dataset.clicked = false\n      target.ariaExpanded = false\n      if (isInlineLink) handleInlineStyles(element[idx])\n    }\n  }\n\n  /**\n   * Add styles for inline option\n   * @private\n   * @param {HTML Elmenent} el - single element instance\n   * @param {HTML Elmenent} link - link wrapper element\n   */\n  function handleInlineStyles(el, link) {\n    if (el) {\n      el.lastElementChild.style.display = 'inline'\n      el.style.display = 'inline'\n    }\n    if (link) link.style.display = 'inline'\n  }\n\n  // API\n  return {\n    init: init\n  }\n}\n\nexport default ReadSmore\n","import ReadSmore from '../../src'\n\nconst readMores = document.querySelectorAll('.js-read-smore')\n// eslint-disable-next-line new-cap\nconst RMs = ReadSmore(readMores)\n\nRMs.init()\n"],"names":["$1eef38cfda4b0c52$export$dba3e2bcdbd49da4","str","words","replace","$1eef38cfda4b0c52$export$7d68961ff6256c01","split","filter","word","trim","length","$db984b8bf9974eec$var$defaultOptions","blockClassName","wordsCount","charsCount","moreText","lessText","isInline","linkElement","element","options","Object","assign","settings","originalContentArr","truncatedContentArr","isChars","el","undefined","dataset","readSmoreChars","truncate","idx","definedCount","parseInt","readSmoreWords","getCount","originalContent","innerHTML","truncateContent","max","trimedSpaces","slice","join","ellipse","originalContentCount","push","isInlineLink","readSmoreInline","linkWrap","document","createElement","className","linkTmpl","handleInlineStyles","after","link","querySelector","addEventListener","event","handleToggle","keyCode","setupToggleEvents","createLink","e","classList","toggle","target","currentTarget","clicked","ariaExpanded","lastElementChild","style","display","init","i","n","querySelectorAll"],"version":3,"file":"index.3874ab90.js.map"}