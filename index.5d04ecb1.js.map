{"mappings":"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","sources":["<anon>","docs/src/app.js","src/index.js","src/read-smore.js","src/utils/index.js"],"sourcesContent":["\"use strict\";\nfunction $1eef38cfda4b0c52$export$952353ec92227944(str) {\n    return str.length;\n}\nfunction $1eef38cfda4b0c52$export$dba3e2bcdbd49da4(str) {\n    const words = $1eef38cfda4b0c52$export$7d68961ff6256c01(str).split(\" \");\n    return words.filter((word)=>word.trim() !== \"\").length;\n}\nfunction $1eef38cfda4b0c52$export$21f453ae16e69339(str) {\n    return str.replace(/(^\\s*)|(\\s*$)/gi, \"\");\n}\nfunction $1eef38cfda4b0c52$export$7d68961ff6256c01(str) {\n    if (str === null || str === \"\") return false;\n    return str.replace(/<[^>]+>/g, \"\");\n}\n\n\n\"use strict\";\nconst $db984b8bf9974eec$var$defaultOptions = {\n    blockClassName: \"read-smore\",\n    wordsCount: 30,\n    charsCount: null,\n    moreText: \"Read More\",\n    lessText: \"Read Less\",\n    isInline: false,\n    linkElement: \"a\"\n};\n/**\n * ReadSmore\n * A simple Read More / Read Less js plugin that maintains origial markup.\n *\n * @author @stephenscaff\n * @param {HTML element} elements\n * @param {Object} options\n * @returns\n */ function $db984b8bf9974eec$var$ReadSmore(elements, options) {\n    options = {\n        ...$db984b8bf9974eec$var$defaultOptions,\n        ...options\n    };\n    // Internal Settings\n    let settings = {\n        originalContentArr: [],\n        truncatedContentArr: []\n    };\n    /**\n   * Init plugin\n   * Loop over instances and begin truncation procress\n   * @public\n   */ function init() {\n        elements.forEach((element, idx)=>{\n            truncate(element, idx);\n        });\n    }\n    /**\n   * Is Characters\n   * Utility to check if is chars mode\n   *\n   * @private\n   * @param {HTML Elmenent} el - single element instance\n   */ function isChars(el) {\n        return el.dataset.readSmoreChars !== undefined || options.charsCount !== null;\n    }\n    /**\n   * Is inline option\n   * @private\n   * @param {HTML element} el - element instance\n   * @returns {Bool}\n   */ function isInline(el) {\n        return el.dataset.readSmoreInline !== undefined || options.isInline === true;\n    }\n    /**\n   * Get Count of characters or words.\n   * Favors Characters from data att, then option, then words.\n   * @private\n   * @param {HTML Elmenent} el - single element instance\n   * @returns {Number}\n   */ function getCount(el) {\n        return parseInt(el.dataset.readSmoreChars) || parseInt(options.charsCount) || parseInt(el.dataset.readSmoreWords) || parseInt(options.wordsCount);\n    }\n    /**\n   * Ellpise Content\n   * Handles content ellipse by words or charactes\n   * @private\n   * @param {String} str - content string.\n   * @param {Number} max - Number of words||chars2 to show before truncation.\n   * @param {Bool} isChars - is by chars\n   */ function ellipse(str, max, isChars = false) {\n        const trimmedSpaces = (0, $1eef38cfda4b0c52$export$21f453ae16e69339)(str);\n        if (isChars) return trimmedSpaces.slice(0, max - 1) + \"...\";\n        const words = trimmedSpaces.split(/\\s+/);\n        return words.slice(0, max - 1).join(\" \") + \"...\";\n    }\n    /**\n   * Truncate logic\n   * Gets user defined count for words/chars (set by data att, option or default),\n   * gets content's count by words/chars, if defined is less than content, truncate\n   * @private\n   * @param {HTML Elmenent} el - single element instance\n   * @param {Number} idx - current instance index\n   */ function truncate(el, idx) {\n        const definedCount = getCount(el);\n        const originalContent = el.innerHTML;\n        const isCharMode = isChars(el);\n        const truncateContent = ellipse(originalContent, definedCount, isCharMode);\n        const originalContentCount = isCharMode ? (0, $1eef38cfda4b0c52$export$952353ec92227944)(originalContent) : (0, $1eef38cfda4b0c52$export$dba3e2bcdbd49da4)(originalContent);\n        settings.originalContentArr.push(originalContent);\n        settings.truncatedContentArr.push(truncateContent);\n        if (definedCount < originalContentCount) {\n            el.innerHTML = settings.truncatedContentArr[idx];\n            createLink(idx);\n        }\n    }\n    /**\n   * Creates and Inserts Read More Link\n   * @private\n   * @param {Number} idx - index reference of looped item\n   */ function createLink(idx) {\n        const isInlineLink = isInline(elements[idx]);\n        const linkWrap = document.createElement(\"span\");\n        linkWrap.className = `${options.blockClassName}__link-wrap`;\n        linkWrap.innerHTML = linkTmpl(elements[idx]);\n        if (isInlineLink) handleInlineStyles(elements[idx], linkWrap);\n        elements[idx].after(linkWrap);\n        setupToggleEvents(idx, isInlineLink);\n    }\n    /**\n   * Read More Link Template\n   * @param {HTML Element} el\n   * @returns {String} - html string\n   */ function linkTmpl(el) {\n        const moreTextData = el.dataset.readSmoreMoreText;\n        const moreText = moreTextData || options.moreText;\n        return `\n      <${options.linkElement}\n        class=\"${options.blockClassName}__link\"\n        style=\"cursor:pointer\"\n        aria-expanded=\"false\"\n        tabIndex=\"0\">\n          ${moreText}\n      </${options.linkElement}>\n    `;\n    }\n    /**\n   * Sets up and calls click and keyup (enter key) events\n   * @private\n   * @param {Number} idx - index of clicked link\n   * @param {Bool} isInlineLink - if link element is inline with content\n   */ function setupToggleEvents(idx, isInlineLink) {\n        const link = elements[idx].nextSibling.firstElementChild;\n        link.addEventListener(\"click\", (event)=>handleToggle(event, idx, isInlineLink));\n        link.addEventListener(\"keyup\", (event)=>{\n            if (event.keyCode === 13 && options.linkElement === \"a\") handleToggle(event, idx, isInlineLink);\n        });\n    }\n    /**\n   * Toggle event\n   * @private\n   * @param {Event} event - click | keyup event\n   * @param {Number} idx - index of clicked link\n   * @param {Bool} isInlineLink - if link element is inline with content\n   */ function handleToggle(event, idx, isInlineLink) {\n        const moreTextData = elements[idx].dataset.readSmoreMoreText;\n        const lessTextData = elements[idx].dataset.readSmoreLessText;\n        const target = event.currentTarget;\n        const clicked = target.dataset.clicked === \"true\";\n        elements[idx].classList.toggle(\"is-expanded\");\n        elements[idx].innerHTML = clicked ? settings.truncatedContentArr[idx] : settings.originalContentArr[idx];\n        target.innerHTML = clicked ? moreTextData || options.moreText : lessTextData || options.lessText;\n        target.dataset.clicked = !clicked;\n        target.ariaExpanded = !clicked;\n        if (isInlineLink) handleInlineStyles(elements[idx]);\n    }\n    /**\n   * Add styles for inline option\n   * @private\n   * @param {HTML Elmenent} el - single element instance\n   * @param {HTML Elmenent} link - link wrapper element\n   */ function handleInlineStyles(el, link) {\n        if (el) {\n            el.lastElementChild.style.display = \"inline\";\n            el.style.display = \"inline\";\n        }\n        if (link) link.style.display = \"inline\";\n    }\n    // API\n    return {\n        init: init\n    };\n}\nvar $db984b8bf9974eec$export$2e2bcd8739ae039 = $db984b8bf9974eec$var$ReadSmore;\n\n\nvar $35da740d59af89ba$export$2e2bcd8739ae039 = (0, $db984b8bf9974eec$export$2e2bcd8739ae039);\n\n\nconst $6a259f6d340dfab6$var$readMores = document.querySelectorAll(\".js-read-smore\");\n// eslint-disable-next-line new-cap\nconst $6a259f6d340dfab6$var$RMs = (0, $35da740d59af89ba$export$2e2bcd8739ae039)($6a259f6d340dfab6$var$readMores);\n$6a259f6d340dfab6$var$RMs.init();\n\n\n//# sourceMappingURL=index.5d04ecb1.js.map\n","import ReadSmore from '../../src'\n\nconst readMores = document.querySelectorAll('.js-read-smore')\n// eslint-disable-next-line new-cap\nconst RMs = ReadSmore(readMores)\n\nRMs.init()\n","import ReadSmore from './read-smore.js'\nexport default ReadSmore\n","import { getWordCount, getCharCount, trimSpaces } from './utils'\n;('use strict')\n\nconst defaultOptions = {\n  blockClassName: 'read-smore',\n  wordsCount: 30,\n  charsCount: null,\n  moreText: 'Read More',\n  lessText: 'Read Less',\n  isInline: false,\n  linkElement: 'a'\n}\n\n/**\n * ReadSmore\n * A simple Read More / Read Less js plugin that maintains origial markup.\n *\n * @author @stephenscaff\n * @param {HTML element} elements\n * @param {Object} options\n * @returns\n */\nfunction ReadSmore(elements, options) {\n  options = { ...defaultOptions, ...options }\n\n  // Internal Settings\n  let settings = {\n    originalContentArr: [],\n    truncatedContentArr: []\n  }\n\n  /**\n   * Init plugin\n   * Loop over instances and begin truncation procress\n   * @public\n   */\n  function init() {\n    elements.forEach((element, idx) => {\n      truncate(element, idx)\n    })\n  }\n\n  /**\n   * Is Characters\n   * Utility to check if is chars mode\n   *\n   * @private\n   * @param {HTML Elmenent} el - single element instance\n   */\n  function isChars(el) {\n    return (\n      el.dataset.readSmoreChars !== undefined || options.charsCount !== null\n    )\n  }\n\n  /**\n   * Is inline option\n   * @private\n   * @param {HTML element} el - element instance\n   * @returns {Bool}\n   */\n  function isInline(el) {\n    return el.dataset.readSmoreInline !== undefined || options.isInline === true\n  }\n\n  /**\n   * Get Count of characters or words.\n   * Favors Characters from data att, then option, then words.\n   * @private\n   * @param {HTML Elmenent} el - single element instance\n   * @returns {Number}\n   */\n  function getCount(el) {\n    return (\n      parseInt(el.dataset.readSmoreChars) ||\n      parseInt(options.charsCount) ||\n      parseInt(el.dataset.readSmoreWords) ||\n      parseInt(options.wordsCount)\n    )\n  }\n\n  /**\n   * Ellpise Content\n   * Handles content ellipse by words or charactes\n   * @private\n   * @param {String} str - content string.\n   * @param {Number} max - Number of words||chars2 to show before truncation.\n   * @param {Bool} isChars - is by chars\n   */\n  function ellipse(str, max, isChars = false) {\n    const trimmedSpaces = trimSpaces(str)\n\n    if (isChars) {\n      return trimmedSpaces.slice(0, max - 1) + '...'\n    }\n\n    const words = trimmedSpaces.split(/\\s+/)\n    return words.slice(0, max - 1).join(' ') + '...'\n  }\n\n  /**\n   * Truncate logic\n   * Gets user defined count for words/chars (set by data att, option or default),\n   * gets content's count by words/chars, if defined is less than content, truncate\n   * @private\n   * @param {HTML Elmenent} el - single element instance\n   * @param {Number} idx - current instance index\n   */\n  function truncate(el, idx) {\n    const definedCount = getCount(el)\n    const originalContent = el.innerHTML\n    const isCharMode = isChars(el)\n    const truncateContent = ellipse(originalContent, definedCount, isCharMode)\n    const originalContentCount = isCharMode\n      ? getCharCount(originalContent)\n      : getWordCount(originalContent)\n\n    settings.originalContentArr.push(originalContent)\n    settings.truncatedContentArr.push(truncateContent)\n\n    if (definedCount < originalContentCount) {\n      el.innerHTML = settings.truncatedContentArr[idx]\n      createLink(idx)\n    }\n  }\n\n  /**\n   * Creates and Inserts Read More Link\n   * @private\n   * @param {Number} idx - index reference of looped item\n   */\n  function createLink(idx) {\n    const isInlineLink = isInline(elements[idx])\n    const linkWrap = document.createElement('span')\n    linkWrap.className = `${options.blockClassName}__link-wrap`\n    linkWrap.innerHTML = linkTmpl(elements[idx])\n\n    if (isInlineLink) {\n      handleInlineStyles(elements[idx], linkWrap)\n    }\n    elements[idx].after(linkWrap)\n    setupToggleEvents(idx, isInlineLink)\n  }\n\n  /**\n   * Read More Link Template\n   * @param {HTML Element} el\n   * @returns {String} - html string\n   */\n  function linkTmpl(el) {\n    const moreTextData = el.dataset.readSmoreMoreText\n    const moreText = moreTextData || options.moreText\n    return `\n      <${options.linkElement}\n        class=\"${options.blockClassName}__link\"\n        style=\"cursor:pointer\"\n        aria-expanded=\"false\"\n        tabIndex=\"0\">\n          ${moreText}\n      </${options.linkElement}>\n    `\n  }\n\n  /**\n   * Sets up and calls click and keyup (enter key) events\n   * @private\n   * @param {Number} idx - index of clicked link\n   * @param {Bool} isInlineLink - if link element is inline with content\n   */\n  function setupToggleEvents(idx, isInlineLink) {\n    const link = elements[idx].nextSibling.firstElementChild\n    link.addEventListener('click', (event) =>\n      handleToggle(event, idx, isInlineLink)\n    )\n    link.addEventListener('keyup', (event) => {\n      if (event.keyCode === 13 && options.linkElement === 'a')\n        handleToggle(event, idx, isInlineLink)\n    })\n  }\n\n  /**\n   * Toggle event\n   * @private\n   * @param {Event} event - click | keyup event\n   * @param {Number} idx - index of clicked link\n   * @param {Bool} isInlineLink - if link element is inline with content\n   */\n  function handleToggle(event, idx, isInlineLink) {\n    const moreTextData = elements[idx].dataset.readSmoreMoreText\n    const lessTextData = elements[idx].dataset.readSmoreLessText\n    const target = event.currentTarget\n    const clicked = target.dataset.clicked === 'true'\n\n    elements[idx].classList.toggle('is-expanded')\n    elements[idx].innerHTML = clicked\n      ? settings.truncatedContentArr[idx]\n      : settings.originalContentArr[idx]\n    target.innerHTML = clicked\n      ? moreTextData || options.moreText\n      : lessTextData || options.lessText\n    target.dataset.clicked = !clicked\n    target.ariaExpanded = !clicked\n\n    if (isInlineLink) handleInlineStyles(elements[idx])\n  }\n\n  /**\n   * Add styles for inline option\n   * @private\n   * @param {HTML Elmenent} el - single element instance\n   * @param {HTML Elmenent} link - link wrapper element\n   */\n  function handleInlineStyles(el, link) {\n    if (el) {\n      el.lastElementChild.style.display = 'inline'\n      el.style.display = 'inline'\n    }\n    if (link) link.style.display = 'inline'\n  }\n\n  // API\n  return {\n    init: init\n  }\n}\n\nexport default ReadSmore\n","'use strict'\n\n/**\n * Get Character Count\n * @param {string\n * @param {number}\n */\nexport function getCharCount(str) {\n  return str.length\n}\n\n/**\n * Get Word Count\n * @param {string}\n * @param {number}\n */\nexport function getWordCount(str) {\n  const words = removeTags(str).split(' ')\n  return words.filter((word) => word.trim() !== '').length\n}\n\n/**\n * Trim whitespace\n * @param {string}\n * @param {string}\n */\nexport function trimSpaces(str) {\n  return str.replace(/(^\\s*)|(\\s*$)/gi, '')\n}\n\n/**\n * Remove HTML Tags from string\n * @param {string}\n * @param {string}\n */\nexport function removeTags(str) {\n  if (str === null || str === '') {\n    return false\n  }\n\n  return str.replace(/<[^>]+>/g, '')\n}\n"],"names":["$db984b8bf9974eec$var$defaultOptions","blockClassName","wordsCount","charsCount","moreText","lessText","isInline","linkElement","$6a259f6d340dfab6$var$readMores","document","querySelectorAll","$6a259f6d340dfab6$var$RMs","elements","options","settings","originalContentArr","truncatedContentArr","handleToggle","event","idx","isInlineLink","moreTextData","dataset","readSmoreMoreText","lessTextData","readSmoreLessText","target","currentTarget","clicked","classList","toggle","innerHTML","ariaExpanded","handleInlineStyles","el","link","lastElementChild","style","display","init","forEach","element","truncate","definedCount","parseInt","readSmoreChars","readSmoreWords","originalContent","isCharMode","undefined","truncateContent","ellipse","str","max","isChars","trimmedSpaces","replace","slice","words","split","join","originalContentCount","length","$1eef38cfda4b0c52$export$7d68961ff6256c01","filter","word","trim","push","createLink","readSmoreInline","linkWrap","createElement","className","linkTmpl","after","setupToggleEvents","nextSibling","firstElementChild","addEventListener","keyCode"],"version":3,"file":"index.5d04ecb1.js.map"}